import csv
import datetime
import calendar
import random
import math

from .. import commons

def create_map(caller, fd, obj) -> tuple[list[datetime.date], str]:
    # fd, obj = args[0], args[1]
    out = fd.save_finish(obj).get_path()
    commons.logger.info(f'Exporting to "{out}"')

    if not caller.calculate_max_absences(None):
        commons.logger.error('Cannot export!')
        return False
    
    cal = calendar.Calendar().yeardatescalendar(datetime.datetime.today().year)
    school_days: list[datetime.date] = []

    for years in cal:
        for month_row in years:
            for weeks in month_row:
                for day in weeks:
                    if len(school_days) >= caller.wdays:
                        break
                    if not day.weekday() > calendar.FRIDAY:
                        if day.month >= commons.SCHOOL_START_MONTH and day.day >= commons.SCHOOL_START_DAY:
                            if day.month < 12:
                                school_days.append(day)
                            elif day.day < 25:
                                school_days.append(day)
                
    party_days_raw = random.choices(school_days, k=caller.result)

    n = len(party_days_raw)
    for i in range(n):
        for j in range(0, n - i - 1):
            day = party_days_raw[j].day
            dayd = party_days_raw[j+1].day

            if day > dayd:
                party_days_raw[j], party_days_raw[j + 1] = party_days_raw[j + 1], party_days_raw[j]

    for i in range(n):
        for j in range(0, n - i - 1):
            month = party_days_raw[j].month
            monthd = party_days_raw[j+1].month

            if month > monthd:
                party_days_raw[j], party_days_raw[j+1] = party_days_raw[j + 1], party_days_raw[j]

    party_days: list[datetime.date] = []
    for index, day in enumerate(party_days_raw):
        if day != party_days_raw[index-1]:
            party_days.append(day)
        else:
            party_days.append(datetime.date(day.year, day.month if day.day < day.max.day else day.month + 1, day.day + 2 if day.day < day.max.day - 2 else 1))

    [commons.logger.info(f'Adding "{item}" as a valid "stay at home" day. yaay!') for item in party_days_raw]

    return (party_days, out)

def save_to_csv(free_days: list[datetime.date], path: str) -> bool:
    csv: list[str] = [f' ,Table generated by FCALC: {commons.REPO}, \n']
    for day in free_days:
        csv.append(f'{day},{"{} - {} - {}, {}\n".format(commons.lang['days'][day.strftime('%A')], commons.lang['months'][day.strftime('%B')], day.year, commons.lang['DoNotGoToSchoolMsg'])}')

    try:
        with open(path, 'w', encoding='utf-8') as out:
            for row in csv:
                out.write(row)
        
        return True

    except Exception as e:
        commons.logger.critical(f'Cannot export!: {e}')
        return False
